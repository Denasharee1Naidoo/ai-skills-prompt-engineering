# Zero-Shot Prompt Practice

- prompt: "Write a professional email to stakeholders explaining a 2-week delay in the WhatsApp integration project. Include an apology, brief explanation of technical challenges, revised timeline, and next steps. Keep the tone professional but reassuring."
  ai_response: "[]]"Subject: Update on WhatsApp Integration Project Timeline

Dear Stakeholders,

I hope this message finds you well.

I‚Äôm writing to inform you that the WhatsApp integration project will experience a delay of approximately two weeks. We sincerely apologize for this shift in timeline and understand the importance of timely delivery for all involved.

The delay is primarily due to unforeseen technical challenges encountered during the integration of third-party APIs. Our development team identified compatibility issues that require additional testing and refinement to ensure a stable and secure implementation. Addressing these now will help us avoid larger disruptions later in the project lifecycle.

Revised Timeline:

Original Go-Live: [Insert Original Date]
New Target Go-Live: [Insert New Date, +2 weeks]
Next Steps:

The technical team is actively resolving the integration issues and will complete regression testing by [Insert Date].
We will provide a detailed progress update in our next stakeholder sync.
A revised project plan will be shared by [Insert Date].
We remain committed to delivering a high-quality solution and appreciate your continued support and understanding. Please feel free to reach out if you have any questions or would like to discuss the revised timeline in more detail.

Warm regards,
Denasharee Naidoo
Senior Business Analyst


- prompt: "Create a concise meeting summary with the following structure: Key Decisions, Action Items (with owners and deadlines), and Next Meeting Date. Write it for a project status meeting about implementing WhatsApp customer service capabilities."
  ai_response: "[Meeting Summary: WhatsApp Customer Service Implementation ‚Äì Project Status

Key Decisions

Proceed with Phase 2 of the integration, focusing on automated response flows.
Prioritize compliance review before enabling customer data exchange via WhatsApp.
Align go-live date with the broader digital support rollout in Q4.
Action Items

Roy Makamu ‚Äì Finalize API integration specs with the vendor by 22 July 2025.
Jann Taylor ‚Äì Coordinate with Legal for compliance sign-off by 24 July 2025.
Kirsten Greyling ‚Äì Draft internal training materials for support agents by 29 July 2025.
Denasharee Naidoo ‚Äì Update the requirements package and circulate for review by 18 July 2025.
Next Meeting Date

Tuesday, 29 July 2025 at 10:00 AM CET]"
- prompt: "Write a professional email to a stakeholder explaining that you need more information for the new WhatsApp project to do a thorough requirement analysis."
  ai_response: |
    Subject: Request for Additional Information ‚Äì WhatsApp Project Requirement Analysis

    Dear [Stakeholder Name],

    I hope this message finds you well. As we begin the requirement analysis for the new WhatsApp project, I would like to ensure that we have a comprehensive understanding of your expectations and objectives.

    To proceed effectively, could you please provide further details regarding the project‚Äôs scope, key features, target audience, and any specific business goals? This information will help us perform a thorough analysis and deliver a solution that aligns with your needs.

    Thank you for your cooperation. I look forward to your response.

    Best regards,
    [Your Name]

- prompt: "Write a brief technical requirements document for integrating WhatsApp Business API into an existing customer service system. Include sections for: Overview, Technical Requirements, Integration Points, and Success Criteria. Use bullet points and keep it under 300 words."
  ai_response: "[Tes1. Overview

Objective: Enable customer service agents to communicate with customers via WhatsApp within the existing support platform.
Scope: Inbound and outbound messaging, automated responses, and message history tracking.
2. Technical Requirements

Access to WhatsApp Business API via Meta-approved provider.
Secure HTTPS endpoints for webhook callbacks.
OAuth 2.0 or API key-based authentication for API access.
JSON-based message formatting and parsing.
Data encryption in transit and at rest.
Compliance with GDPR and local data protection regulations.
3. Integration Points

CRM System: Sync customer profiles and conversation history.
Ticketing System: Link WhatsApp messages to support tickets.
Notification Engine: Trigger automated responses and alerts.
Analytics Dashboard: Track message volume, response time, and resolution metrics.
4. Success Criteria

100% message delivery and receipt confirmation within SLA.
Seamless agent handoff between WhatsApp and other channels.
Real-time syncing of customer data and ticket updates.
Positive feedback from pilot users and support agents.
No critical errors or data loss during the first 30 days post-launch.

# One-Shot Prompt Practice
# Code Review Comment
prompt: |
  Write a constructive code review comment for a pull request. Here's an example:
  
  Example: "Great work on implementing the user authentication! I noticed the password validation could be strengthened by adding a check for special characters. Consider using a regex pattern like /^(?=.*[!@#$%^&*])/ to ensure at least one special character. This would align with our security standards. Otherwise, the logic flow looks solid!"
  
  Now write a similar code review comment for a WhatsApp integration module that has good error handling but lacks proper logging.
ai_response: "[Test this prompt and paste the response here]"

# User Story Writing
prompt: |
  Write a user story following this format:
  
  Example: "As a customer service manager, I want to view real-time chat metrics on a dashboard so that I can monitor team performance and identify bottlenecks during peak hours. Acceptance criteria: Dashboard updates every 30 seconds, shows active chats, average response time, and agent availability."
  
  Now write a user story for a customer who wants to receive automated WhatsApp notifications about their order status.
ai_response: "[Test this prompt and paste the response here]"

# Bug Report
prompt: |
  Write a detailed bug report using this structure:
  
  Example: "**Title:** Login form validation fails with special characters
  **Environment:** Chrome 120, Windows 11, Production
  **Steps to Reproduce:** 1) Navigate to login page 2) Enter email with + symbol 3) Click submit
  **Expected Result:** User should be logged in successfully
  **Actual Result:** Error message 'Invalid email format' appears
  **Priority:** Medium - affects users with email aliases"
  
  Now write a bug report for WhatsApp messages not being delivered during peak hours.
ai_response: "[Test this prompt and paste the response here]"

# Status Update Email
prompt: |
  Write a project status update email following this example:
  
  Example: "Subject: Weekly Update - Mobile App Redesign Project
  
  Hi Team,
  
  Here's our progress update for Week 12:
  
  ‚úÖ **Completed:** User interface mockups for login and dashboard screens
  ‚úÖ **In Progress:** Backend API integration (60% complete)
  ‚ö†Ô∏è **Blocked:** Waiting for design approval on payment flow
  üìÖ **Next Week:** Complete API integration, begin user testing preparation
  
  Risk: Design approval delay may push testing back 3 days. Mitigation: Parallel work on other screens.
  
  Questions or concerns? Let's discuss in our Friday standup.
  
  Best regards,
  Sarah"
  
  Now write a status update email for the WhatsApp integration project covering week 8 of development.
ai_response: "[Test this prompt and paste the response here]"
 Code Review Comment
Great job implementing robust error handling in the WhatsApp integration module! One suggestion to enhance maintainability and debugging would be to add structured logging throughout the key interaction points‚Äîespecially around message delivery and API response handling. This will help us trace issues more effectively in production and improve observability. Consider using a consistent logging format with context like user ID, timestamp, and message type.

‚úÖ User Story
As an online shopper, I want to receive automated WhatsApp notifications about my order status so that I can stay informed without checking my email.
Acceptance criteria:

Notifications are sent for order confirmation, shipping, and delivery
Messages include order number and tracking link
Opt-in is required during checkout
‚úÖ Bug Report
Title: WhatsApp messages not delivered during peak hours
Environment: WhatsApp Business API v2.45, Node.js backend, Production
Steps to Reproduce:

Send customer support messages via WhatsApp between 6‚Äì8 PM CET
Monitor delivery status in logs
Compare with off-peak delivery behavior
Expected Result: Messages should be delivered within 5 seconds regardless of time
Actual Result: Messages remain in ‚Äúpending‚Äù state or fail with timeout errors
Priority: High ‚Äì affects customer communication during peak usage
‚úÖ Status Update Email
Subject: Week 8 Update ‚Äì WhatsApp Integration Project

Hi Team,

Here‚Äôs the progress update for Week 8:

‚úÖ Completed: Initial API authentication and sandbox testing
‚úÖ In Progress: Message template approval and webhook configuration (80% complete)
‚ö†Ô∏è Blocked: Awaiting Meta‚Äôs approval for production access
üìÖ Next Week: Finalize production setup, begin internal pilot testing

Risk: Delay in Meta approval may impact pilot start date.
Mitigation: Preparing fallback plan using test environment for training.

Let me know if you have any questions before our Thursday sync.

Best regards,
Denasharee
# One-Shot vs Zero-Shot Comparison

# Observations
response_quality_differences: "[Add your observations about response quality differences]"
pattern_influence: "[Note any patterns in how examples influenced outputs]"
task_benefits: "[Record which types of tasks benefited most from examples]"

best_practices:
effective_examples: "[Your insights about crafting effective examples]"
choosing_examples: "[Tips for choosing representative examples]"
when_to_use: "[When one-shot works better than zero-shot]"
üîç Response Quality Differences
One-shot prompts consistently produced more structured, relevant, and context-aware responses. The examples helped set expectations for tone, format, and level of detail. In contrast, zero-shot responses (not shown here but inferred from experience) tend to be more variable‚Äîsometimes too generic or missing key structural elements.

üß† Pattern Influence
The examples clearly influenced the outputs by:

Establishing a consistent tone (e.g., professional yet friendly in the code review and status email).
Providing a structural template (e.g., bullet points in the bug report and user story).
Encouraging domain-specific vocabulary (e.g., ‚ÄúOAuth 2.0,‚Äù ‚Äúwebhook,‚Äù ‚Äúcompliance sign-off‚Äù).
‚úÖ Task Benefits
Tasks that benefited most from examples:

Structured writing tasks: Bug reports, user stories, and status updates showed the most improvement with examples.
Tone-sensitive tasks: Code reviews and stakeholder emails were more effective when tone was modeled.
üí° Best Practices
Effective Examples
Use realistic, domain-relevant content.
Keep examples concise but complete‚Äîshowing structure, tone, and intent.
Highlight key elements (e.g., action items, acceptance criteria, risks).
Choosing Examples
Match the example to the task type (e.g., don‚Äôt use a casual blog post to model a formal report).
Choose examples that reflect the expected complexity and audience.
Use examples that demonstrate both content and formatting.
When to Use One-Shot
When the task requires a specific tone, structure, or format.
When the task is open-ended or creative (e.g., writing, summarizing, reviewing).
When consistency and clarity are critical (e.g., documentation, stakeholder communication).
# Few-Shot Prompt Practice
# API Documentation
prompt: |
  Write API endpoint documentation following these examples:
  
  Example 1:
  POST /api/users
  Purpose: Create a new user account
  Parameters: email (string, required), password (string, required), name (string, optional)
  Response: 201 Created with user object, 400 Bad Request if validation fails
  
  Example 2:
  GET /api/orders/{id}
  Purpose: Retrieve order details by ID
  Parameters: id (integer, required, path parameter)
  Response: 200 OK with order object, 404 Not Found if order doesn't exist
  
  Example 3:
  DELETE /api/sessions/{token}
  Purpose: Logout user and invalidate session
  Parameters: token (string, required, path parameter)
  Response: 204 No Content on success, 401 Unauthorized if token invalid
  
  Now write documentation for a WhatsApp webhook endpoint that receives message status updates.
ai_response: "[Test this prompt and paste the response here]"

# Test Case Writing:
prompt: |
  Write test cases following these examples:
  
  Example 1:
  Test ID: TC001
  Feature: User Registration
  Scenario: Valid email registration
  Given: User is on registration page
  When: User enters valid email "test@example.com" and password "SecurePass123!"
  Then: Account is created and confirmation email is sent
  
  Example 2:
  Test ID: TC002
  Feature: Password Reset
  Scenario: Reset with invalid email
  Given: User is on password reset page
  When: User enters non-existent email "fake@nowhere.com"
  Then: Generic message "If email exists, reset link sent" is displayed
  
  Example 3:
  Test ID: TC003
  Feature: File Upload
  Scenario: Upload oversized file
  Given: User has file larger than 10MB
  When: User attempts to upload the file
  Then: Error message "File size exceeds 10MB limit" is shown
  
  Now write test cases for WhatsApp message delivery failure scenarios.
ai_response: "[Test this prompt and paste the response here]"

# Product Requirements
prompt: |
  Write a product requirement section following these examples:
  
  Example 1:
  REQ-001: User Authentication
  Priority: High
  Description: Users must authenticate using email and password
  Acceptance Criteria:
  - Login form validates email format
  - Password must be 8+ characters with special character
  - Failed login attempts locked after 5 tries
  - Session expires after 2 hours of inactivity
  Dependencies: None
  
  Example 2:
  REQ-002: Order Tracking
  Priority: Medium  
  Description: Customers can track order status in real-time
  Acceptance Criteria:
  - Order status updates automatically
  - Tracking page shows current location
  - Email notifications sent on status changes
  - Estimated delivery time displayed
  Dependencies: REQ-001, Payment Gateway Integration
  
  Example 3:
  REQ-003: Mobile Responsiveness
  Priority: Medium
  Description: Application adapts to mobile screen sizes
  Acceptance Criteria:
  - Works on devices 320px width and above
  - Touch-friendly button sizes (44px minimum)
  - Readable text without horizontal scrolling
  - Fast loading on 3G connections
  Dependencies: REQ-001, REQ-002
  
  Now write a requirement for WhatsApp message template management functionality.
ai_response: "[T‚úÖ API Documentation
POST /api/webhooks/whatsapp/status

Purpose: Receive message status updates from WhatsApp Business API
Parameters:
message_id (string, required): Unique ID of the WhatsApp message
status (string, required): Message status (e.g., sent, delivered, read, failed)
timestamp (string, required): ISO 8601 timestamp of the status update
recipient_id (string, required): WhatsApp ID of the message recipient
error_code (integer, optional): Error code if status is "failed"
error_message (string, optional): Description of the failure
Response:
200 OK on successful receipt
400 Bad Request if required fields are missing or malformed
401 Unauthorized if authentication fails
‚úÖ Test Case Writing
Test ID: TC004
Feature: WhatsApp Message Delivery
Scenario: Message fails due to recipient being offline
Given: User sends a message to a recipient who is offline
When: WhatsApp attempts delivery
Then: Status update shows "pending" or "undelivered" within 30 seconds

Test ID: TC005
Feature: WhatsApp Message Delivery
Scenario: Message fails due to invalid recipient number
Given: User sends a message to an invalid WhatsApp number
When: Message is processed by the API
Then: Status update shows "failed" with error code 131047

Test ID: TC006
Feature: WhatsApp Message Delivery
Scenario: Message fails during peak traffic
Given: System sends bulk messages during peak hours
When: API throttles or times out
Then: Status update shows "failed" with appropriate error code and retry logic is triggered

‚úÖ Product Requirements
REQ-004: WhatsApp Message Template Management

Priority: High
Description: Admin users must be able to create, edit, and manage WhatsApp message templates for customer communication.
Acceptance Criteria:
Templates can be created with placeholders (e.g., {{customer_name}}, {{order_id}})
Templates must be submitted for Meta approval before use
Only approved templates are available for sending
Templates are categorized by use case (e.g., order updates, reminders)
Audit log tracks changes to templates
Dependencies: WhatsApp Business API access, Admin Portal Authentication]"
